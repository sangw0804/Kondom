<div id="modal" class="modal modal-hide">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5>title</h5>
            </div>
            <div class="modal-body">
                <h6>type</h6>
                <ul>
                    <li>콘돔들</li>
                    <li>콘돔들</li>
                    <li>콘돔들</li>
                </ul>
            </div>
        </div>
    </div>
</div>

<div id="map" style="height: 100vh;">
    <div class="input-group" id="search">
        <input id="searchBox" class="form-control" placeholder="검색해주세요." />
        <div class="input-group-append">
            <button id="searchbtn" class="btn btn-primary"><i class="fas fa-search"></i></button>
            <button id="presentLocBtn" class="btn btn-warning"><i class="fas fa-location-arrow"></i></button>
        </div>        
    </div>    
</div>

<button id="categorybtn" class="btn btn-warning"><i class="fas fa-location-arrow"></i></button>

<div class="category1">
<h2>hello</h2>
</div>

<script>
    //// 전역변수들 ========================================================================
    let mapDiv = document.getElementById("map");
    let map = new naver.maps.Map(mapDiv, {
        logoControl: false,
        mapDataControl: false,
        zoom:12
    });
    let markers = []; // 마커들의 배열

    
    
    
    
    // 로직 ===============================================================================
    // 현재위치 버튼 로직
    

    $("#categorybtn").click(() => {
        $('.category1').toggleClass('categoryshow')   
    });
    
    // toggleClass('category2')
    // css('transform', 'translate(0, -100%)')   

    
    
    $("#presentLocBtn").click((event) => {
        $(event.target).attr("disabled", true);
        navigator.geolocation.getCurrentPosition(({ coords }) => {
            dismissMarkers();
            let center = new naver.maps.LatLng(coords.latitude, coords.longitude );

            // 현재위치 좌표값 => 주소로 변환
            naver.maps.Service.reverseGeocode({
                location: center, coordType: naver.maps.Service.CoordType.LatLng
            },(status, {result}) => {
                if(status === naver.maps.Service.Status.ERROR) return alert("현재위치 좌표값을 주소로 변환하는 요청이 실패했습니다!");

                const {dongmyun , sigugun} = result.items[1].addrdetail;
                searchingAround(dongmyun+" "+sigugun);
            });
            setCenterWithMarker(null, null, center);

            $(event.target).removeAttr("disabled");
        });
    });

    // 검색하면 검색위치로 setCenter & 키워드 사용 근처 콘돔판매점 검색해 json 리턴
    $("#searchBox").keydown((event) => { // 엔터
        if(event.keyCode === 13) {
            dismissMarkers();
            searchingAround($("#searchBox").val());
            searchingCenter($("#searchBox").val());
        }
    })

    $("#searchbtn").click((event) => {  // searchbtn 클릭
        dismissMarkers();
        searchingAround($("#searchBox").val());
        searchingCenter($("#searchBox").val());
    })
    
    // 맵에 클릭하면 모달이 show 인경우 hide로 바꿔주는 이벤트 핸들러를 달아준다.
    naver.maps.Event.addListener(map, "click", (event) => {
        if($("#modal").attr("class") === "modal-show") {
            $("#modal").attr("class", "modal-hide");
        }
    });

    //// 함수들 ====================================================================================

    const searchingAround = (searchQuery) => {

        // home controller로 ajax 요청
        let encodedQuery = encodeURI(searchQuery);
        axios("/search-around/"+encodedQuery+".json").then(({ data }) => {

            // 마커생성
            for(let key of Object.keys(data)) {
                data[key].forEach(datum => {
                    let marker = new naver.maps.Marker({
                        map: map,
                        position: fromKatecToLatLng(datum.mapx, datum.mapy),
                        title: datum.title,
                        // icon: {key값마다 다른 아이콘 설정 필요},
                        zIndex: 100
                    });
                    marker.type = key;
                    markers.push(marker);
                });
            }

            // markers 배열에 있는 마커들 활성화
            markers.forEach(mk => mk.setMap(map));

            // 현재 markers배열에 존재하는 모든 마커들을 순회하면서 클릭 핸들러를 달아줌. 이때 해당 마커의 인덱스를 bind로 묶어준다.
            markers.forEach((mk, index) => naver.maps.Event.addListener(mk,'click', markerClickHandler.bind(this, index)));
        }).catch(err => {
            console.log(err);
        })
    }

    const searchingCenter = (searchQuery) => {
        let encodedQuery = encodeURI(searchQuery);
        axios("/search-center/" + encodedQuery +".json").then(({data}) => {


            setCenterWithMarker(data.mapx, data.mapy);
        }).catch(err => {
            console.log(err);
        });
    }

    // 카텍 좌표를 위경도 좌표로 변환하는 함수
    const fromKatecToLatLng = (katecX, katecY) => {
        return naver.maps.TransCoord.fromTM128ToLatLng(new naver.maps.Point(katecX, katecY));
    }
    
    // 마커를 클릭하면 모달을 show 상태로 만든다.
    const markerClickHandler = (index, event) => {
        console.log(markers[index]);
        $("#modal h5").html(markers[index].title);
        $("#modal h6").html(markers[index].type.toUpperCase());
        $("#modal").attr("class", "modal-show");
    }

    // 기존의 마커들을 모두 해제
    const dismissMarkers = () => {
        markers.forEach(mk => mk.setMap(null));
        markers = [];
    }

    // x y 좌표를 받아서 현재위치 마커를 찍고 setCenter 해줌
    const setCenterWithMarker = (katecX, katecY, latLng = null) => {
        let searchedLatLng;
        if(latLng) {
            searchedLatLng = latLng;   
        } else {
            searchedLatLng = fromKatecToLatLng(katecX, katecY);
        }
        
        var circle = new naver.maps.Circle({
            map: map,
            center: searchedLatLng,
            radius: 70,
            strokeOpacity: 0,
            fillColor: "#37D53C",
            fillOpacity: 0.3
        });

        var circle = new naver.maps.Circle({
            map: map,
            center: searchedLatLng,
            radius: 175,
            strokeOpacity: 0,
            strokeColor: 'yellow',
            fillColor: 'yellow',
            fillOpacity: 0.2
        });

        var circle = new naver.maps.Circle({
            map: map,
            center: searchedLatLng,
            radius: 350,
            strokeOpacity: 0,
            strokeColor: 'red',
            fillColor: 'red',
            fillOpacity: 0.05
        });
        

        

        let marker = new naver.maps.Marker({
            map: map,
            position: searchedLatLng,
            title: "현재 위치",
            zIndes: 100,
            animation: naver.maps.Animation.BOUNCE
        })
        markers.push(marker);
        map.setCenter(searchedLatLng);
        map.setZoom(12, true)
    }

</script>