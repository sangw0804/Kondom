<script src="https://unpkg.com/infinite-scroll@3/dist/infinite-scroll.pkgd.min.js"></script>

<div id="modal" class="modal modal-hide">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header justify-content-center">
                <h5>title</h5>
            </div>
            <div class="modal-body" style="height: 470px;">
                
                <p class="text-right" style="margin-bottom: 2px"><span class="badge badge-primary">time</span> <span class="time"></span></p>
                <p class="text-right"><span class="badge badge-primary">call</span> <span class="tel"></span></p>
                <div id="container">
                </div>
            </div>
        </div>
    </div>
</div>

<div class="lds-ring"><div></div><div></div><div></div><div></div></div>

<div id="map" style="height: 100vh;">
    <div class="input-group" id="search">
        <input id="searchBox" class="form-control" placeholder="검색해주세요." />
        <div class="input-group-append">
            <button id="searchbtn" class="btn btn-primary"><i class="fas fa-search"></i></button>
            <button id="presentLocBtn" class="btn btn-warning"><i class="fas fa-location-arrow"></i></button>
        </div>        
    </div>    
</div>

<button id="categorybtn" class="btn btn-danger"><i class="fas fa-plus"></i></button>

<%= render 'category', condoms: @condoms %>

<script>
    //// 전역변수들 ========================================================================
    let mapDiv = document.getElementById("map");
    let map = new naver.maps.Map(mapDiv, {
        logoControl: false,
        mapDataControl: false,
        zoom:13,
        minZoom: 8
    });
    let markers = []; // 마커들의 배열
    let circles = [];
    
    
    // 로직 ===============================================================================
    
    // 토글 로직
    $("#categorybtn").click(() => {
        $('.category1').toggleClass('categoryshow')   
    });
    
    // toggleClass('category2')
    // css('transform', 'translate(0, -100%)')
    // 현재위치 버튼 로직
    $("#presentLocBtn").click((event) => {
        showSpinner();
        $(event.target).attr("disabled", true);
       
    });

    // 검색하면 검색위치로 setCenter & 키워드 사용 근처 콘돔판매점 검색해 json 리턴
    $("#searchBox").keydown((event) => { // 엔터
        if(event.keyCode === 13) {
            showSpinner();
            dismissMarkers();
            searchingAround($("#searchBox").val()).then(() => {
                searchingCenter($("#searchBox").val());
                hideSpinner();
            });
        }
    })

    $("#searchbtn").click((event) => {  // searchbtn 클릭
        showSpinner();
        dismissMarkers();
        searchingAround($("#searchBox").val()).then(() => {
            searchingCenter($("#searchBox").val());
            hideSpinner();
        });
    })
    
    // 맵에 클릭하면 모달이 show 인경우 hide로 바꿔주는 이벤트 핸들러를 달아준다.
    naver.maps.Event.addListener(map, "click", (event) => {
        if($("#modal").attr("class") === "modal-show") {
            $("#modal").attr("class", "modal-hide");
        }
    });

    //// 함수들 ====================================================================================

   const hideSpinner = () => {
        $(".lds-ring").attr("style", "display: none;");
    }
     const showSpinner = () => {
        $(".lds-ring").removeAttr("style");
    }
     const searchPresentLoc = () => {
        navigator.geolocation.getCurrentPosition(({ coords }) => {
            dismissMarkers();
            let center = new naver.maps.LatLng(coords.latitude, coords.longitude );
             // 현재위치 좌표값 => 주소로 변환
            naver.maps.Service.reverseGeocode({
                location: center, coordType: naver.maps.Service.CoordType.LatLng
            },(status, {result}) => {
                if(status === naver.maps.Service.Status.ERROR) return alert("현재위치 좌표값을 주소로 변환하는 요청이 실패했습니다!");
                console.log(result.items);
                const {dongmyun , sigugun} = result.items[1].addrdetail;
                searchingAround(sigugun+" "+dongmyun).then(() => {
                    setCenterWithMarker(null, null, center);
                    $(event.target).removeAttr("disabled");
                    hideSpinner();
                });
            });
        });
    }

    const searchingAround = (searchQuery) => {

        // home controller로 ajax 요청
        let encodedQuery = encodeURI(searchQuery);
        return axios("/search-around/"+encodedQuery+".json").then(({ data }) => {
            console.log(data);
            // 마커생성
            for(let key of Object.keys(data)) {
                data[key].list.forEach(datum => {
                    let iconUrl = "";
                    switch (true) {
                        case key === "약국": iconUrl = data[key].open ? '<%= asset_path('icons/drug.png')%>' : '<%= asset_path('icons/drug_close.png')%>' ; break;
                        case ["올리브영","롭스","왓슨스"].includes(key):  iconUrl = data[key].open ? '<%= asset_path('icons/drugStore.png')%>' : '<%= asset_path('icons/drugStore_close.png')%>' ; break;
                        default:  iconUrl = data[key].open ? '<%= asset_path('icons/conven.png')%>' : '<%= asset_path('icons/conven_close.png')%>' ; break;
                    }
                    let marker = new naver.maps.Marker({
                        map: map,
                        position: fromKatecToLatLng(datum.mapx, datum.mapy),
                        title: datum.title,
                        icon: iconUrl,
                        zIndex: 100
                    });
                    marker.type = key;
                    marker.open = data[key].open;
                    marker.condoms = data[key].condoms;
                    marker.tel = datum.telephone;
                    marker.time = data[key].time;
                    markers.push(marker);
                });
            }

            // markers 배열에 있는 마커들 활성화
            markers.forEach(mk => mk.setMap(map));

            // 현재 markers배열에 존재하는 모든 마커들을 순회하면서 클릭 핸들러를 달아줌. 이때 해당 마커의 인덱스를 bind로 묶어준다.
            markers.forEach((mk, index) => naver.maps.Event.addListener(mk,'click', markerClickHandler.bind(this, index)));
        }).catch(err => {
            console.log(err);
        });
    }

    const searchingCenter = (searchQuery) => {
        let encodedQuery = encodeURI(searchQuery);
        axios("/search-center/" + encodedQuery +".json").then(({data}) => {
            setCenterWithMarker(data.mapx, data.mapy);
        }).catch(err => {
            console.log(err);
        });
    }

    // 카텍 좌표를 위경도 좌표로 변환하는 함수
    const fromKatecToLatLng = (katecX, katecY) => {
        return naver.maps.TransCoord.fromTM128ToLatLng(new naver.maps.Point(katecX, katecY));
    }
    
    // 마커를 클릭하면 모달을 show 상태로 만든다.
    const markerClickHandler = (index, event) => {
        $("#modal .time").removeAttr("style");
        console.log(markers[index]);
        $("#modal h5").html(markers[index].title);
        $("#modal h6").html(markers[index].type.toUpperCase());
        $("#modal .tel").text(markers[index].tel);
        $("#modal .time").text(markers[index].time);
        if(!markers[index].open) {
            $("#modal .time").attr("style", "text-decoration: line-through");
        }
        $("#modal #container").empty();
        markers[index].condoms.forEach((condom) => {
            $("#modal #container").append($.parseHTML(getHtmlList(condom)));
        });
        $("#modal").attr("class", "modal-show");
    }

    // 기존의 마커들을 모두 해제
    const dismissMarkers = () => {
        markers.forEach(mk => mk.setMap(null));
        markers = [];
    }

    // x y 좌표를 받아서 현재위치 마커를 찍고 setCenter 해줌
    const setCenterWithMarker = (katecX, katecY, latLng = null) => {
        let searchedLatLng;
        if(latLng) {
            searchedLatLng = latLng;
        } else {
            searchedLatLng = fromKatecToLatLng(katecX, katecY);
        }
        circles.forEach(circle => {circle.setMap(null)});  // 기존의 원 레이어 제거
        circles = [];

        circles.push(new naver.maps.Circle({
            map: map,
            center: searchedLatLng,
            radius: 70,
            strokeOpacity: 0,
            fillColor: "#37D53C",
            fillOpacity: 0.3
        }));

        circles.push(new naver.maps.Circle({
            map: map,
            center: searchedLatLng,
            radius: 175,
            strokeOpacity: 0,
            strokeColor: 'yellow',
            fillColor: 'yellow',
            fillOpacity: 0.2
        }));

        circles.push(new naver.maps.Circle({
            map: map,
            center: searchedLatLng,
            radius: 350,
            strokeOpacity: 0,
            strokeColor: 'red',
            fillColor: 'red',
            fillOpacity: 0.05
        }));
        let centerIcon = '<%= asset_path('sad_elephant.png')%>';

        let yellowCircleBound = circles[1].getBounds();
        markers.forEach(marker => {
            if(marker.open && yellowCircleBound.hasLatLng(marker.position)) {
                centerIcon = '<%= asset_path('elephant.png')%>';
            }
        });
        
        let marker = new naver.maps.Marker({
            map: map,
            position: searchedLatLng,
            title: "현재 위치",
            icon: centerIcon,
            zIndex: 101,
            animation: naver.maps.Animation.BOUNCE
        })
        markers.push(marker);
        map.setCenter(searchedLatLng);
        map.setZoom(13, true);
    }

    // 이것은 리액트가 아니다.
    const getHtmlList = (condom) => {
        const ct = {normal: "일반형", slim: "초박형", dot: "돌기형",drug: "도포형"}

        return `<div class="d-flex box mb-3">
                    <div class="box-img border rounded ml-1"><img height="120" width="120" src="/assets${condom.image}" /></div>
                    <div class="d-flex justify-content-center align-items-center">
                        <ul style="list-style: none;">
                            <li>${condom.name}</li>
                            <li>${condom.price} 원</li>
                            <li>${ct[condom.conType]}</li>
                            <li><span class="review--point">${"★".repeat(condom.score || 1)}</span> ${condom.score} </li>
                        </ul>
                    </div>
                </div>`;
    }

    window.onload = searchPresentLoc;
</script>
