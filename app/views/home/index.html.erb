<div id="modal" class="modal-hide">
    <h2>title</h2>
    <h3>type</h3>
    <ul>
        <li>콘돔들</li>
        <li>콘돔들</li>
        <li>콘돔들</li>
    </ul>
</div>

<div id="map">
    <button id="presentLocBtn">현재 위치로</button>

    <input id="searchBox" />
</div>

<script>
    let mapDiv = document.getElementById("map");
    let map = new naver.maps.Map(mapDiv);
    let markers = []; // 마커들의 배열

    // 현재위치 버튼 로직
    $("#presentLocBtn").click((event) => {
        $(event.target).attr("disabled", true);
        navigator.geolocation.getCurrentPosition(({ coords }) => {
            map.setCenter(new naver.maps.LatLng(coords.latitude, coords.longitude ));
            $(event.target).removeAttr("disabled");
        });
    });

    // 검색하면 검색위치로 setCenter & 키워드 사용 근처 콘돔판매점 검색해 json 리턴
    $("#searchBox").keydown((event) => {
        if(event.keyCode === 13) {
            // 기존의 마커들을 모두 해제
            markers.forEach(mk => {
                mk.setMap(null);
            });
            markers = [];

            // home controller로 ajax 요청
            let encodedQuery = encodeURI(event.target.value);
            console.log(encodedQuery);
            axios("/search/"+encodedQuery+".json").then(({ data }) => {
                console.log(data);
                let searchedLatLng = naver.maps.TransCoord.fromTM128ToLatLng(new naver.maps.Point(data["current"].mapx, data["current"].mapy));
                let marker = new naver.maps.Marker({
                    map: map,
                    position: searchedLatLng,
                    title: "현재 위치",
                    zIndes: 100
                })
                markers.push(marker);
                map.setCenter(searchedLatLng);
                
                //마커생성
                for(let key of Object.keys(data)) {
                    if(key === "current") {
                        continue;
                    }
                    data[key].forEach(datum => {
                        // console.log(datum);
                        let marker = new naver.maps.Marker({
                            map: map,
                            position: naver.maps.TransCoord.fromTM128ToLatLng(new naver.maps.Point(datum.mapx, datum.mapy)),
                            title: datum.title,
                            // icon: {key값마다 다른 아이콘 설정 필요},
                            zIndex: 100
                        });
                        marker.type = key;
                        markers.push(marker);
                    });
                }

                // markers 배열에 있는 마커들 활성화
                markers.forEach(mk => {
                    mk.setMap(map);
                });

                // 각각의 마커인덱스를 받아 클릭시 콘솔에 해당마커를 띄워줌
                const markerClickHandler = (index, event) => {
                    // 실제로는 이곳에 클릭 시 로직을 작성해주어야 함.
                    console.log(markers[index]);
                    $("#modal h2").text(markers[index].title);
                    $("#modal h3").text(markers[index].type);
                    $("#modal").attr("class", "modal-show");
                }

                // 현재 markers배열에 존재하는 모든 마커들을 순회하면서 클릭 핸들러를 달아줌. 이때 해당 마커의 인덱스를 bind로 묶어준다.
                markers.forEach((mk, index) => {
                    naver.maps.Event.addListener(mk,'click', markerClickHandler.bind(this, index));
                })

                naver.maps.Event.addListener(map, "click", (event) => {
                    if($("#modal").attr("class") === "modal-show") {
                        $("#modal").attr("class", "modal-hide");
                    }
                });
            }).catch(err => {
                console.log(err);
            })
        }
    })
</script>