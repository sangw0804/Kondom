<div id="modal" class="modal modal-hide">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5>title</h5>
            </div>
            <div class="modal-body">
                <h6>type</h6>
                <ul>
                    <li>콘돔들</li>
                    <li>콘돔들</li>
                    <li>콘돔들</li>
                </ul>
            </div>
        </div>
    </div>
</div>

<div id="map" style="height: 100vh;">
    <div class="input-group" id="search">
        <input id="searchBox" class="form-control" placeholder="검색해주세요." />
        <div class="input-group-append">
            <button id="searchbtn" class="btn btn-primary"><i class="fas fa-search"></i></button>
            <button id="presentLocBtn" class="btn btn-warning"><i class="fas fa-location-arrow"></i></button>
        </div>
    </div>
</div>

<script>
    let mapDiv = document.getElementById("map");
    let map = new naver.maps.Map(mapDiv);
    let markers = []; // 마커들의 배열

    // 현재위치 버튼 로직
    $("#presentLocBtn").click((event) => {
        $(event.target).attr("disabled", true);
        navigator.geolocation.getCurrentPosition(({ coords }) => {
            let center = new naver.maps.LatLng(coords.latitude, coords.longitude )
            let marker = new naver.maps.Marker({
                map: map,
                position: center,
                title: "현재 위치",
                zIndes: 100,
                animation: naver.maps.Animation.BOUNCE
            });
            markers.push(marker);
            markers.forEach(mk => {
                mk.setMap(map);
            });

            map.setCenter(center);
            $(event.target).removeAttr("disabled");
        });
    });

    // 검색하면 검색위치로 setCenter & 키워드 사용 근처 콘돔판매점 검색해 json 리턴
    // 엔터
    $("#searchBox").keydown((event) => {
        if(event.keyCode === 13) {
            searching();
        }
    })

    // searchbtn 클릭
    $("#searchbtn").click((event) => {
        searching();
    })

    const searching = () => {
        // 기존의 마커들을 모두 해제
        markers.forEach(mk => {
            mk.setMap(null);
        });
        markers = [];

        // home controller로 ajax 요청
        let encodedQuery = encodeURI($("#searchBox").val());
        console.log(encodedQuery);
        axios("/search/"+encodedQuery+".json").then(({ data }) => {
            console.log(data);
            let searchedLatLng = fromKatecToLatLng(data["current"].mapx, data["current"].mapy);
            let marker = new naver.maps.Marker({
                map: map,
                position: searchedLatLng,
                title: "현재 위치",
                zIndes: 100,
                animation: naver.maps.Animation.BOUNCE
            })
            markers.push(marker);
            map.setCenter(searchedLatLng);

            // 
            
            // 마커생성
            for(let key of Object.keys(data)) {
                if(key === "current") {
                    continue;
                }
                data[key].forEach(datum => {
                    // console.log(datum);
                    let marker = new naver.maps.Marker({
                        map: map,
                        position: fromKatecToLatLng(datum.mapx, datum.mapy),
                        title: datum.title,
                        // icon: {key값마다 다른 아이콘 설정 필요},
                        zIndex: 100
                    });
                    marker.type = key;
                    markers.push(marker);
                });
            }

            // markers 배열에 있는 마커들 활성화
            markers.forEach(mk => {
                mk.setMap(map);
            });

            // 각각의 마커인덱스를 받아 클릭시 콘솔에 해당마커를 띄워줌
            const markerClickHandler = (index, event) => {
                // 실제로는 이곳에 클릭 시 로직을 작성해주어야 함.
                console.log(markers[index]);
                $("#modal h5").html(markers[index].title);
                $("#modal h6").html(markers[index].type.toUpperCase());
                $("#modal").attr("class", "modal-show");
            }

            // 현재 markers배열에 존재하는 모든 마커들을 순회하면서 클릭 핸들러를 달아줌. 이때 해당 마커의 인덱스를 bind로 묶어준다.
            markers.forEach((mk, index) => {
                naver.maps.Event.addListener(mk,'click', markerClickHandler.bind(this, index));
            })

            // 맵에 클릭하면 모달이 show 인경우 hide로 바꿔주는 이벤트 핸들러를 달아준다.
            naver.maps.Event.addListener(map, "click", (event) => {
                if($("#modal").attr("class") === "modal-show") {
                    $("#modal").attr("class", "modal-hide");
                }
            });
        }).catch(err => {
            console.log(err);
        })
    }

    // 카텍 좌표를 위경도 좌표로 변환하는 함수
    const fromKatecToLatLng = (katecX, katecY) => {
        return naver.maps.TransCoord.fromTM128ToLatLng(new naver.maps.Point(katecX, katecY));
    }
</script>